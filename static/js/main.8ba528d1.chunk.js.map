{"version":3,"sources":["redux/dialog-reducer.ts","assets/images/user.jpg","api/api.ts","components/Users/Users.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selector.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspence.tsx","App.tsx","index.tsx","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Header/Header.module.css","components/common/FormsControls/FormsControls.module.css","redux/profile-reducer.ts","hoc/withAuthRedirect.tsx"],"names":["SEND_MESSAGE","initialState","dialogs","name","id","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","ResultCodeEnum","ResultCodeForCaptcha","instanse","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","followed","post","response","unfollowed","delete","getProfile","userId","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptcha","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","map","u","count","filter","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","Success","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReduser","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","activeClassName","activeLink","Music","News","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNUmber","rightPortionPageNUmber","styles","paginator","prevButton","onClick","p","pageNumber","selectedPage","nextButton","User","follow","unfollow","alt","src","photos","small","userPhoto","photo","disabled","some","Users","props","getUser","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","compose","connect","bind","page","items","totalCount","withAuthRedirect","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","Input","validate","required","placeholder","error","loginData","CaptchaIsRequired","url","length","stopSubmit","_error","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","ReactDOM","document","getElementById","style","width","height","preloader","FormControl","input","meta","child","hasError","touched","formControl","children","Textarea","restProps","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","addPostActionCreator","newPostBody","setStatus","getUserProfile","profileData","file","newPost","mapStateToPropsForRedirect","RedirectComponent"],"mappings":"6JAmBMA,EAAe,eAEjBC,EAAgC,CAChCC,QAAS,CACL,CAACC,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,QAASC,GAAI,GACpB,CAACD,KAAM,QAASC,GAAI,GACpB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,SAAUC,GAAI,IAEzBC,SAAU,CACN,CAACD,GAAI,EAAGE,QAAS,MACjB,CAACF,GAAI,EAAGE,QAAS,4BACjB,CAACF,GAAI,EAAGE,QAAS,MACjB,CAACF,GAAI,EAAGE,QAAS,MACjB,CAACF,GAAI,EAAGE,QAAS,QAmBZC,EAAqB,SAACC,GAAD,MAAoD,CAClFC,KAAMT,EACNQ,mBAIWE,IArBQ,WAAiE,IAAhEC,EAA+D,uDAAtCV,EAAcW,EAAwB,uCACnF,OAAQA,EAAOH,MAEX,KAAKT,EACD,IAAIa,EAAOD,EAAOJ,eAClB,OAAO,2BACAG,GADP,IAEIN,SAAS,GAAD,mBAAMM,EAAMN,UAAZ,CAAsB,CAACD,GAAI,EAAGE,QAASO,OAGvD,QACI,OAAOF,K,iCClDJ,QAA0B,kC,gCCAzC,gNAwFYG,EAIAC,EA5FZ,SAGMC,EAHN,OAGiBC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CACL,UAAW,0CA8BNC,EAAW,CACpBC,SADoB,WACqC,IAA/CC,EAA8C,uDAAxB,EAAGC,EAAqB,uDAAF,EAClD,OAAOT,EAASU,IAAT,sBACYF,EADZ,kBACiCC,IACtCE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEtBC,SANoB,SAMX1B,GACL,OAAOY,EAASe,KAAT,kBACQ3B,GAAM,IACnBuB,MAAK,SAAAK,GACH,OAAOA,EAASH,SAGxBI,WAboB,SAaT7B,GACP,OAAOY,EAASkB,OAAT,kBACQ9B,IAAMuB,MAAK,SAAAK,GACtB,OAAOA,EAASH,SAGxBM,WAnBoB,SAmBTC,GAER,OADCC,QAAQC,KAAK,6CACPC,EAAWJ,WAAWC,KAMvBG,EAAa,CACtBJ,WADsB,SACXC,GACP,OAAOpB,EAASU,IAA4B,YAAcU,GAAQT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEtFW,UAJsB,SAIZJ,GACN,OAAOpB,EAASU,IAAI,mBAAqBU,IAE7CK,aAPsB,SAOTC,GACT,OAAO1B,EAAS2B,IAAT,kBAAqD,CAACD,OAAQA,KAEzEE,UAVsB,SAUZC,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClB7B,EAAS2B,IAAT,iBAA+BG,EAAS,CAC3CzB,QAAS,CACL,gBAAkB,0BAI9B4B,YAnBsB,SAmBVC,GACR,OAAOlC,EAAS2B,IAAI,WAAYO,M,SAI5BpC,O,qBAAAA,I,kBAAAA,M,cAIAC,O,2CAAAA,M,KA4BL,IAAMoC,EAAU,CACnBC,GADmB,WAEf,OAAOpC,EAASU,IAAT,YAAyCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAErEwB,MAJoB,SAIdC,EAAcC,GAA8E,IAA7DC,EAA4D,wDAA/BC,EAA+B,uDAAN,KACtF,OAAOzC,EAASe,KAAT,cAAgD,CAACuB,QAAOC,WAAUC,aAAYC,YAChF9B,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAExB6B,OARoB,WASnB,OAAO1C,EAASkB,OAAT,eAAmDP,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAQjE8B,EAAc,CACvBC,WADuB,WAEnB,OAAO5C,EAASU,IAAT,6BAAkEC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,W,oBC1IhGgC,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,yHCatEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wEC0DRO,EAAS,SACTC,EAAW,WACXC,EAAY,YACZC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAqB,qBACrBC,EAA+B,+BAGjC5E,EAAiC,CACjC6E,MAAO,GACPrD,SAAU,GACVsD,gBAAiB,EACjBvD,YAAa,EACbwD,YAAY,EACZC,oBAAqB,IAkDZC,EAAgB,SAAC9C,GAAD,MAAuC,CAAC3B,KAAM8D,EAAQnC,WACtE+C,EAAkB,SAAC/C,GAAD,MAAyC,CAAC3B,KAAM+D,EAAUpC,WAE5EgD,EAAiB,SAAC5D,GAAD,MAAoD,CAC9Ef,KAAMiE,EACNlD,gBAMS6D,EAAmB,SAACL,GAAD,MAAsD,CAClFvE,KAAMmE,EAAoBI,eAEjBM,EAA0B,SAACN,EAAqB5C,GAAtB,MAA6E,CAChH3B,KAAM,+BAAgCuE,aAAY5C,WAkBhDmD,EAAkB,uCACpB,WAAOC,EAAgCpF,EAAYqF,EAAgBC,GAAnE,SAAAC,EAAA,6DACIH,EAASF,GAAwB,EAAMlF,IAD3C,SAEyBqF,EAAUrF,GAFnC,OAIgC,IAJhC,OAIiBwF,YACTJ,EAASE,EAActF,IAE3BoF,EAASF,GAAwB,EAAOlF,IAP5C,2CADoB,4DA2BTyF,EA3GM,WAAiE,IAAhElF,EAA+D,uDAAvDV,EAAcW,EAAyC,uCACjF,OAAQA,EAAOH,MACX,KAAK8D,EACD,OAAO,2BACA5D,GADP,IACcmE,MAAOnE,EAAMmE,MAAMgB,KAAI,SAAAC,GAC7B,OAAIA,EAAE3F,KAAOQ,EAAOwB,OACT,2BAAI2D,GAAX,IAAcjE,UAAU,IAErBiE,OAGnB,KAAKvB,EACD,OAAO,2BACA7D,GADP,IACcmE,MAAOnE,EAAMmE,MAAMgB,KAAI,SAAAC,GAC7B,OAAIA,EAAE3F,KAAOQ,EAAOwB,OACT,2BAAI2D,GAAX,IAAcjE,UAAU,IAErBiE,OAGnB,KAAKtB,EACD,OAAO,2BAAI9D,GAAX,IAAkBmE,MAAOlE,EAAOkE,QACpC,KAAKJ,EACD,OAAO,2BACA/D,GADP,IACca,YAAaZ,EAAOY,cAEtC,KAAKmD,EACD,OAAO,2BACAhE,GADP,IACcoE,gBAAiBnE,EAAOoF,QAE1C,KAAKpB,EACD,OAAO,2BACAjE,GADP,IACcqE,WAAYpE,EAAOoE,aAErC,KAAKH,EACD,OAAO,YAAC,eAEGlE,GAFX,IAEkBsE,oBAAqBrE,EAAOoE,WAAP,sBACrBrE,EAAMsE,qBADe,CACMrE,EAAOwB,SACtCzB,EAAMsE,oBAAoBgB,QAAO,SAAA7F,GAAE,OAAIA,IAAOQ,EAAOwB,YAGvE,QACI,OAAOzB,I,QC/EfV,EAAyB,CACzBmC,OAAQ,KACRkB,MAAO,KACPD,MAAO,KACP6C,QAAQ,EACRC,WAAY,MAgBHC,EAAkB,SAAChE,EAAuBkB,EAAsBD,EAAsB6C,GAApE,MAC1B,CAACzF,KAjCgB,gBAiCK4F,QAAS,CAACjE,SAAQkB,QAAOD,QAAO6C,YAG9CI,EAAuB,SAACH,GAAD,MAC/B,CAAC1F,KApC0B,0BAoCK4F,QAAS,CAACF,gBAIlCI,EAAkB,yDAAiB,WAAOf,GAAP,uBAAAG,EAAA,sEAC1BxC,IAAQC,KADkB,QACxCoD,EADwC,QAEjCZ,aAAe9E,IAAe2F,UAAU,EACtBD,EAAO3E,KAA3BzB,EADyC,EACzCA,GAAIiD,EADqC,EACrCA,MAAOC,EAD8B,EAC9BA,MAChBkC,EAASY,EAAgBhG,EAAIkD,EAAOD,GAAO,KAJH,2CAAjB,uDA0ChBqD,EAhEK,WAAyD,IAAxD/F,EAAuD,uDAA/CV,EAAcW,EAAiC,uCACxE,OAAQA,EAAOH,MACX,IAAK,gBACL,IAAK,0BACD,OAAO,2BACAE,GACAC,EAAOyF,SAElB,QACI,OAAO1F,I,kBCzDbgG,EAAqB,sBAMvB1G,EAAiC,CACjC2G,aAAa,GAiCFC,EA9BI,WAA8E,IAA7ElG,EAA4E,uDAApEV,EAAcW,EAAsD,uCAC5F,OAAQA,EAAOH,MACX,KAAKkG,EACD,OAAO,2BACAhG,GADP,IAEEiG,aAAa,IAEnB,QACI,OAAOjG,IClBbmG,EAAcC,YAAgB,CAChCC,YAAaC,IACbC,YAAaxG,IACbyG,UAAWtB,EACXuB,KAAMV,EACNW,KAAMC,IACNC,IAAKV,IAMLW,EAAQC,YAAYX,EAAaY,YAAgBC,MAGtCH,IAGfI,OAAOJ,MAAQA,E,oFCAAK,GAvBA,WACX,OAAO,sBAAKC,UAAWC,IAAEC,IAAlB,UACH,qBAAKF,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,uBAEJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,wBAEJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,IAAEK,WAAvC,oBAEJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACA,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,qBAEA,qBAAKN,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,qBAEJ,qBAAKN,UAAWC,IAAEE,KAAlB,SACI,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAEK,WAA3C,4B,SCpBCC,GAAQ,WACjB,OACI,yCCFKC,GAAO,WAChB,OACI,wCCFKC,GAAW,WACpB,OACI,4C,sCCiCOC,GA1BiC,SAAC,GAI7C,IAJqH,IAAvEC,EAAsE,EAAtEA,gBAAgBhH,EAAsD,EAAtDA,SAAUD,EAA4C,EAA5CA,YAAYkH,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,YAE/FC,EAAaC,KAAKC,KAAKL,EAAkBhH,GACzCsH,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAC1C,EAAwCQ,mBAAS,GAAjD,oBAAKC,EAAL,KAAoBC,EAApB,KACIC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAE7C,OAAO,sBAAKb,UAAW0B,KAAOC,UAAvB,UACFL,EAAgB,GAAK,wBAAQtB,UAAW0B,KAAOE,WAAYC,QAAS,WAAKN,EAAiBD,EAAgB,IAArF,kBACjBL,EACI9C,QAAO,SAAA2D,GAAC,OAAIA,GAAKN,GAAyBM,GAAKL,KAC/CzD,KAAI,SAAA8D,GACL,OAAO,sBAAM9B,UAAWtG,IAAgBoI,EAAIJ,KAAOK,WAAaL,KAAOM,aAC1DH,QAAS,WAAOjB,EAAckB,IADpC,SAC0CA,OAExDV,EAAeE,GAAiB,wBAAQtB,UAAW0B,KAAOO,WAAYJ,QAAS,WAAKN,EAAiBD,EAAgB,IAArF,sB,+BCnB5BY,GAAgC,SAAC,GAAoD,IAAnDlF,EAAkD,EAAlDA,MAAOG,EAA2C,EAA3CA,oBAAqBgF,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SAC/E,OAAO,8BACFpF,EAAMgB,KAAI,SAAAC,GAAC,OAAI,gCACZ,iCACI,8BACI,cAAC,IAAD,CAASmC,GAAI,YAAcnC,EAAE3F,GAA7B,SAAiC,qBAAK+J,IAAK,GACLC,IAAuB,MAAlBrE,EAAEsE,OAAOC,MAAgBvE,EAAEsE,OAAOC,MAAQC,KAC/CzC,UAAW0B,KAAOgB,YAG5D,8BACKzE,EAAEjE,SAAW,wBAAQ2I,SAAUxF,EAAoByF,MAAK,SAAAtK,GAAE,OAAIA,IAAO2F,EAAE3F,MAClDuJ,QAAS,WACLO,EAASnE,EAAE3F,KAFvB,sBAIR,wBAAQqK,SAAUxF,EAAoByF,MAAK,SAAAtK,GAAE,OAAIA,IAAO2F,EAAE3F,MAClDuJ,QAAS,WACLM,EAAOlE,EAAE3F,KAFrB,yBAMd,iCACI,8BAAM2F,EAAE5F,OACR,8BAAM4F,EAAErD,YAEZ,iCACI,8BAAM,uBACN,8BAAM,yBAzBYqD,EAAE3F,UC0BrBuK,GAtBD,SAACC,GAIX,IAFA,IAAIhC,EAAaC,KAAKC,KAAK8B,EAAM7F,gBAAkB6F,EAAMnJ,UACrDsH,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,OAAO,gCACH,cAAC,GAAD,CAAWxH,YAAaoJ,EAAMpJ,YACnBkH,cAAekC,EAAMlC,cACpBD,gBAAiBmC,EAAM7F,gBACxBtD,SAAUmJ,EAAMnJ,SAChBkH,YAAe,KAE1B,8BACA,cAAC,GAAD,CAAM7D,MAAO8F,EAAM9F,MAAOmF,OAAQW,EAAMX,OAAQhF,oBAAqB2F,EAAM3F,oBAAqBiF,SAAUU,EAAMV,iB,4BC3B3GW,GAAUC,cAJQ,SAACnK,GAC/B,OAAOA,EAAMwG,UAAUrC,SAG8B,SAACA,GACnD,OAAOA,EAAMmB,QAAO,SAAAF,GAAC,OAAE,QAGdgF,GAAc,SAACpK,GACxB,OAAOA,EAAMwG,UAAU1F,UAGduJ,GAAqB,SAACrK,GAC/B,OAAOA,EAAMwG,UAAUpC,iBAGdkG,GAAiB,SAACtK,GAC3B,OAAOA,EAAMwG,UAAU3F,aAGd0J,GAAgB,SAACvK,GAC1B,OAAOA,EAAMwG,UAAUnC,YAGdmG,GAAyB,SAACxK,GACnC,OAAOA,EAAMwG,UAAUlC,qBCoBrBmG,G,4MASF1C,cAAgB,SAACmB,GACb,EAAKe,MAAMrJ,SAASsI,EAAY,EAAKe,MAAMnJ,W,uDAR/C,WAII4J,KAAKT,MAAMrJ,SAAS8J,KAAKT,MAAMpJ,YAAa6J,KAAKT,MAAMnJ,Y,oBAO3D,WACI,OAAO,qCACF4J,KAAKT,MAAM5F,WAAa,cAACsG,GAAA,EAAD,IAAe,KACxC,cAAC,GAAD,CACIvG,gBAAiBsG,KAAKT,MAAM7F,gBAC5BtD,SAAU4J,KAAKT,MAAMnJ,SACrBD,YAAa6J,KAAKT,MAAMpJ,YACxBkH,cAAe2C,KAAK3C,cACpBuB,OAAQoB,KAAKT,MAAMX,OACnBC,SAAUmB,KAAKT,MAAMV,SACrBpF,MAAOuG,KAAKT,MAAM9F,MAClBI,cAAemG,KAAKT,MAAM1F,cAC1BC,gBAAiBkG,KAAKT,MAAMzF,gBAC5BF,oBAAqBoG,KAAKT,MAAM3F,6B,GA1BnBsG,IAAMC,WA2EpBC,eACXC,cA1CkB,SAAC/K,GACnB,MAAO,CACHmE,MAAO+F,GAAQlK,GACfc,SAAUsJ,GAAYpK,GACtBoE,gBAAiBiG,GAAmBrK,GACpCa,YAAayJ,GAAetK,GAC5BqE,WAAYkG,GAAcvK,GAC1BsE,oBAAqBkG,GAAuBxK,MAoC9B,CACdsJ,OZkDc,SAAC7J,GACnB,8CAAO,WAAOoF,GAAP,SAAAG,EAAA,6DACHH,EAASF,GAAwB,EAAMlF,IADpC,SAEGmF,EAAmBC,EAAUpF,EAAIkB,IAASQ,SAAS6J,KAAKrK,KAAW4D,GAFtE,2CAAP,uDYnDYgF,SZ0DQ,SAAC9J,GACrB,8CAAO,WAAOoF,GAAP,SAAAG,EAAA,6DACHH,EAASF,GAAwB,EAAMlF,IADpC,SAEGmF,EAAmBC,EAAUpF,EAAIkB,IAASW,WAAW0J,KAAKrK,KAAW6D,GAFxE,2CAAP,uDY3DsBD,gBAAeC,kBACjCC,iBAAgBE,0BAAyB/D,SZyBzB,SAACqK,EAAcnK,GACnC,8CAAO,WAAO+D,GAAP,eAAAG,EAAA,6DACHH,EAASH,GAAiB,IAC1BG,EAASJ,EAAewG,IAFrB,SAIkBtK,IAASC,SAASqK,EAAMnK,GAJ1C,OAICO,EAJD,OAKHwD,EAASH,GAAiB,IAC1BG,GAzBiBV,EAyBC9C,EAAS6J,MAzBuC,CAACpL,KAAMgE,EAAWK,WA0BpFU,GArB2BT,EAqBC/C,EAAS8J,WArBiD,CAC1FrL,KAAMkE,EACNqB,MAAOjB,KAYA,iCAduB,IAACA,EALVD,IAmBd,OAAP,yDYxBAiH,KANWN,CAMOL,I,oBC/GPY,GAZA,SAACpB,GACZ,OAAO,yBAAQ9C,UAAWC,KAAEkE,OAArB,UACH,qBAAK9B,IAAI,GAAGC,IAAI,kDAEhB,qBAAKtC,UAAWC,KAAEmE,WAAlB,SACKtB,EAAM1E,OACD,gCAAM0E,EAAMvH,MAAZ,MAAqB,wBAAQsG,QAASiB,EAAMlH,OAAvB,qBAArB,OACL,cAAC,IAAD,CAASwE,GAAI,SAAb,yBCLPiE,G,4JAGF,WACI,OAAO,cAAC,GAAD,eAAYd,KAAKT,Y,GAJFW,IAAMC,WAwBrBE,iBARO,SAAC/K,GACnB,MAAO,CACH0C,MAAO1C,EAAMyG,KAAK/D,MAClB6C,OAAQvF,EAAMyG,KAAKlB,UAMV,CAACxC,ObiFI,yDAAiB,WAAO8B,GAAP,SAAAG,EAAA,sEACZxC,IAAQO,SADI,cAEpBkC,aAAe9E,IAAe2F,SACzCjB,EAASY,EAAgB,KAAM,KAAM,MAAM,IAHZ,2CAAjB,wDalFPsF,CACYS,I,qCC4BrBC,GAAiBC,aAAU,CAAChF,KAAM,SAAjBgF,EAxBE,SAACzB,GAEtB,OAAO,uBAAM0B,SAAU1B,EAAM2B,aAAtB,UAIH,cAACC,GAAA,EAAD,CAAOC,UAAWC,KAAOC,SAAU,CAACC,MAAWzM,KAAM,QAAS0M,YAAa,UAG3E,cAACL,GAAA,EAAD,CAAOC,UAAWC,KAAOC,SAAU,CAACC,MAAWzM,KAAM,WAAY0M,YAAa,WAAYpM,KAAM,aAEhG,gCACI,cAAC+L,GAAA,EAAD,CAAOC,UAAWC,KAAOvM,KAAM,aAAcM,KAAM,aADvD,kBAGA,gCACKmK,EAAMzE,YAAc,qBAAKgE,IAAK,GAAIC,IAAKQ,EAAMzE,aAC9C,8BACKyE,EAAMkC,QAEX,oDAqBGpB,iBALS,SAAC/K,GAAD,MAAiD,CACrEwF,WAAYxF,EAAMyG,KAAKjB,WACvBD,OAAQvF,EAAMyG,KAAKlB,UAGkF,CAAC7C,MdqBrF,SAACC,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAsF,WAAO+B,GAAP,iBAAAG,EAAA,sEACjFxC,IAAQE,MAAMC,EAAOC,EAAUC,EAAYC,GADsC,QACnGsJ,EADmG,QAEzFnH,aAAe9E,IAAe2F,QACxCjB,EAASe,MAELwG,EAAUnH,aAAe7E,IAAqBiM,mBAC9CxH,EAhBiB,uCAAiB,WAAOA,GAAP,iBAAAG,EAAA,sEACvBhC,IAAYC,aADW,OACpC/B,EADoC,OAEpCsE,EAAatE,EAAKoL,IAGxBzH,EAASc,EAAqBH,IALY,2CAAjB,uDAkBjB7F,EAAUyM,EAAU1M,SAAS6M,OAAS,EAAIH,EAAU1M,SAAS,GAAK,aAEtEmF,EAAS2H,YAAW,QAAS,CAACC,OAAQ9M,MAV6D,2CAAtF,wDcrBNoL,EA3DD,SAACd,GAKX,OAAIA,EAAM1E,OACC,cAAC,KAAD,CAAUgC,GAAG,aAGjB,gCACH,uCACA,cAACkE,GAAD,CAAgBE,SAVH,SAACxJ,GACd8H,EAAMvH,MAAMP,EAASQ,MAAOR,EAASS,SAAUT,EAASU,WAAYV,EAASW,kBCjBxE4J,GAAe,SAAC7B,GACzB,OAAO,SAACZ,GACJ,OAAS,cAAC,WAAD,CAAU0C,SAAU,cAAChC,GAAA,EAAD,IAApB,SACT,cAACE,EAAD,eAAeZ,QCajB2C,GAAmBhC,IAAMiC,MAAK,kBAAM,iCACpCC,GAAmBlC,IAAMiC,MAAK,kBAAM,iCAIpCE,G,uKAEF,WACIrC,KAAKT,MAAM+C,kB,oBAGf,WACI,OAAKtC,KAAKT,MAAMhE,YAKZ,cAAC,IAAD,UACI,sBAAKkB,UAAU,cAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,sBAAKA,UAAU,sBAAf,UACI,cAAC,KAAD,CAAO8F,KAAK,WAAWC,OAAQR,GAAaE,MAC5C,cAAC,KAAD,CAAOK,KAAK,oBACLC,OAAQR,GAAaI,MAC5B,cAAC,KAAD,CAAOG,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,KAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,KAAD,CAAOD,KAAK,SAASnB,UAAWpE,KAChC,cAAC,KAAD,CAAOuF,KAAK,QAAQnB,UAAWnE,KAC/B,cAAC,KAAD,CAAOsF,KAAK,YAAYnB,UAAWlE,aAhBxC,cAAC+C,GAAA,EAAD,Q,GARDC,IAAMC,WA0CTC,eACXC,cAJoB,SAAC/K,GAAD,MAA4B,CAChDiG,YAAajG,EAAM4G,IAAIX,eAIL,CAAC+G,cf/BM,kBAAiB,SAACnI,GAC7BA,EAASe,KAIf5E,MAAK,WACT6D,EAZ+E,CAAC/E,KAAM,sBAAuBmG,aAYjF,UewBhC8E,CACmCgC,KC1DvCI,IAASD,OACD,cAAC,IAAD,UACI,cAAC,KAAD,CAAUrG,MAAOA,EAAjB,SACA,cAAC,GAAD,QAEcuG,SAASC,eAAe,SAOlDjK,K,kECtBe,UAA0B,sC,cCG5BuH,EAAY,WACrB,OACI,qBAAKnB,IAAK,GAAI8D,MAAO,CAACC,MAAO,QAASC,OAAQ,QAAS/D,IAAKgE,M,mBCJpEvK,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,gCAAgC,WAAa,8BAA8B,WAAa,gC,+OCIhMuK,EAAc,SAAC,GAAmC,EAAlCC,MAAmC,IAA5BC,EAA2B,EAA3BA,KAAgB3D,GAAW,EAArB4D,MAAqB,kBAErDC,EAAWF,EAAKG,SAAWH,EAAKzB,MAEtC,OAAO,sBAAKhF,UAAW0B,IAAOmF,YAAc,KAAOF,EAAUjF,IAAOsD,MAAQ,IAArE,UACH,8BACKlC,EAAMgE,WAEX,8BACKH,GAAY,iCAAOF,EAAKzB,MAAZ,aAMZ+B,EAAW,SAACjE,GACrB,IAAO0D,EAAoC1D,EAApC0D,MAAuBQ,GAAalE,EAA7B2D,KAA6B3D,EAAvB4D,MAApB,YAA2C5D,EAA3C,IAEA,OAAO,eAACyD,EAAD,2BAAiBzD,GAAjB,kBAAyB,oDAAc0D,GAAWQ,SAIhDpC,EAAQ,SAAC9B,GAClB,IAAO0D,EAAoC1D,EAApC0D,MAAuBQ,GAAalE,EAA7B2D,KAA6B3D,EAAvB4D,MAApB,YAA2C5D,EAA3C,IAEA,OAAO,eAACyD,EAAD,2BAAiBzD,GAAjB,cAAwB,iDAAW0D,GAAWQ,IAA9C,U,gCC9BX,oEAAO,IAAMlC,EAAW,SAACmC,GACrB,IAAGA,EAGH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAGA,EAAM7B,OAAS+B,EACd,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCTRpL,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,mBCA/DD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,6PC8DrEoL,EAAW,WACXC,EAAmB,mBACnBC,EAAa,aACbC,EAAc,cACdC,EAAqB,qBAuBvBrP,EAAgC,CAChCsP,MAAO,CACH,CAACnP,GAAI,EAAGE,QAAS,mBAAoBkP,WAAY,IACjD,CAACpP,GAAI,EAAGE,QAAS,qBAAuBkP,WAAY,IACpD,CAACpP,GAAI,EAAGE,QAAS,SAAUkP,WAAY,IACvC,CAACpP,GAAI,EAAGE,QAAS,OAAQkP,WAAY,KAEzCtM,QAAS,KACTR,OAAQ,IAkCC+M,EAAuB,SAACC,GAAD,MAA6C,CAACjP,KAAMyO,EAAUQ,gBAQrFC,EAAY,SAACjN,GAAD,MACrB,CAACjC,KAAM2O,EAAY1M,WAKVkN,EAAiB,SAACxN,GAAD,8CAA+B,WAAOoD,GAAP,eAAAG,EAAA,sEACjCrE,IAASa,WAAWC,GADa,OACrDyN,EADqD,OAEzDrK,EAVA,CAAC/E,KAAM0O,EAAkBjM,QAUD2M,IAFiC,2CAA/B,uDAKjBrN,EAAY,SAACJ,GAAD,8CAA+B,WAAOoD,GAAP,eAAAG,EAAA,sEAC/BpD,IAAWC,UAAUJ,GADU,OAChDJ,EADgD,OAEpDwD,EAASmK,EAAU3N,EAASH,OAFwB,2CAA/B,uDAKZY,EAAe,SAACC,GAAD,8CAA+B,WAAO8C,GAAP,SAAAG,EAAA,sEAClCpD,IAAWE,aAAaC,GADU,OAEtB,IAFsB,OAE1Cb,KAAK+D,YACdJ,EAASmK,EAAUjN,IAHgC,2CAA/B,uDAOfE,EAAY,SAACkN,GAAD,8CAA0B,WAAOtK,GAAP,eAAAG,EAAA,sEAC1BpD,IAAWK,UAAUkN,GADK,OAEd,KAD7B9N,EAD2C,QAElCH,KAAK+D,YACdJ,GAhCyB6E,EAgCCrI,EAASH,KAAKA,KAhCqC,CAACpB,KAAM6O,EAAoBjF,YA6B7D,iCA7BnB,IAACA,IA6BkB,OAA1B,uDAQVpD,IAtEQ,WAAiE,IAAhEtG,EAA+D,uDAAvDV,EAAcW,EAAyC,uCAEnF,OAAQA,EAAOH,MACX,KAAKyO,EACD,IAAIa,EAAoB,CACpB3P,GAAI,EAAGE,QAASM,EAAO8O,YAAaF,WAAY,GAEpD,OAAO,2BACA7O,GADP,IAEI4O,MAAM,GAAD,mBAAM5O,EAAM4O,OAAZ,CAAmBQ,MAGhC,KAAKV,EACD,OAAO,2BAAI1O,GAAX,IAAkB4O,MAAM,YAAK5O,EAAM4O,MAAMtJ,QAAO,SAAA2D,GAAC,OAAIA,EAAExJ,KAAOQ,EAAOR,SACzE,KAAK+O,EACD,OAAO,2BACAxO,GADP,IACcuC,QAAStC,EAAOsC,UAElC,KAAKkM,EACD,OAAO,2BACAzO,GADP,IACc+B,OAAQ9B,EAAO8B,SAEjC,KAAK4M,EACD,OAAO,2BACA3O,GADP,IACcuC,QAAQ,2BAAKvC,EAAMuC,SAAZ,IAAqBmH,OAAQzJ,EAAOyJ,WAE7D,QACI,OAAO1J,K,oJCtHfqP,EAA6B,SAACrP,GAC9B,MAAO,CACHuF,OAAQvF,EAAMyG,KAAKlB,SAId6F,EAAmB,SAACP,GAAoB,IAE3CyE,EAF0C,4JAG5C,WACI,OAAI5E,KAAKT,MAAM1E,OACR,cAACsF,EAAD,eAAeH,KAAKT,QADI,cAAC,IAAD,CAAU1C,GAAG,eAJJ,GAEhBqD,IAAMC,WAOtC,OAAOE,YAA6DsE,EAA7DtE,CAAyFuE,M","file":"static/js/main.8ba528d1.chunk.js","sourcesContent":["export type ActionTypes = SendMessageActionType\r\n\r\ntype SendMessageActionType = {\r\n    type: 'SEND_MESSAGE'\r\n    newMessageBody: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\"\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {name: 'Dimych', id: 1},\r\n        {name: 'Andrey', id: 2},\r\n        {name: 'Sveta', id: 3},\r\n        {name: 'Sasha', id: 4},\r\n        {name: 'Victor', id: 5},\r\n        {name: 'Valera', id: 6}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is yuor it-kamasutra'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: body}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): SendMessageActionType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n})\r\n\r\n\r\nexport default dialogsReducer","export default __webpack_public_path__ + \"static/media/user.f20dfda9.jpg\";","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\nconst instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    headers: {\r\n        \"API-KEY\": \"9796e0df-7156-4180-913f-3e6c30a4c76a\"\r\n    }\r\n})\r\n\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\n\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype FollowedResponseType = {\r\n    resultCode: ResultCodeEnum\r\n    messages: string\r\n    data: {\r\n\r\n    }\r\n}\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number = 1, pageSize: number = 5){\r\n        return instanse.get<GetUsersResponseType>(\r\n            `/users?page=${currentPage}&count=${pageSize}`\r\n        ).then(res => res.data)\r\n    },\r\n    followed(id: number){\r\n        return instanse.post<FollowedResponseType>(\r\n            `/follow/${id}`, {}\r\n        ).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    unfollowed(id: number){\r\n        return instanse.delete<FollowedResponseType>(\r\n            `/follow/${id}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile(userId: number){\r\n        console.warn('Obsolete method. Please profileApi object')\r\n       return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\ntype GetProfileResponseType = ProfileType\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number){\r\n        return instanse.get<GetProfileResponseType>(`/profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instanse.get(`/profile/status/` + userId )\r\n    },\r\n    updateStatus(status: string) {\r\n        return instanse.put<FollowedResponseType>(`/profile/status`,{status: status})\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instanse.put(`/profile/photo`, formData,{\r\n            headers: {\r\n                'Content- Type' : 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instanse.put('/profile', profile)\r\n    }\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success,\r\n    Error,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired= 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\n\r\ntype LogoutResponseType = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instanse.get<MeResponseType>(`/auth/me`).then(res => res.data)\r\n    },\r\n   login(email: string,password: string,rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instanse.post<LoginResponseType>(`/auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res=>res.data)\r\n   },\r\n   logout() {\r\n    return instanse.delete<LogoutResponseType>(`/auth/login`).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instanse.get<GetCaptchaResponseType>(`/security/get-captcha-url`).then(res=> res.data)\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__2PajG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__vt2I8\",\"item\":\"Navbar_item__3hdpX\",\"activeLink\":\"Navbar_activeLink__2iY89\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type ActionType =\r\n    FollowActionType\r\n    | UnfollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype FollowActionType = {\r\n    type: 'FOLLOW'\r\n    userId: number\r\n}\r\ntype UnfollowActionType = {\r\n    type: 'UNFOLLOW'\r\n    userId: number\r\n}\r\ntype SetUsersActionType = {\r\n    type: 'SET_USERS'\r\n    users: Array<UsersType>\r\n}\r\n\r\ntype SetCurrentPageActionType = {\r\n    type: 'SET_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\ntype SetTotalUsersCountActionType = {\r\n    type: 'SET_TOTAL_USERS_COUNT'\r\n    count: number\r\n}\r\ntype ToggleIsFetchingActionType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\ntype ToggleFollowingProgressActionType = {\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return (\r\n                {\r\n                    ...state, followingInProgress: action.isFetching\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id !== action.userId)\r\n                }\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowActionType => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId: number): UnfollowActionType => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n})\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n})\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING, isFetching\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: \"TOGGLE_IS_FOLLOWING_PROGRESS\", isFetching, userId\r\n})\r\n\r\ntype ThunkType = ThunkAction<void, RootReduxState, unknown, ActionType>\r\n\r\nexport const getUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n\r\n        let response = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow =\r\n    async (dispatch: Dispatch<ActionType>, id: number, apiMethod: any, actionCreator: (userId: number) => FollowActionType | UnfollowActionType): Promise<void> => {\r\n        dispatch(toggleFollowingProgress(true, id))\r\n        let response = await apiMethod(id)\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(actionCreator(id))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, id))\r\n    }\r\n\r\nexport const follow = (id: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, id))\r\n        await followUnfollowFlow(dispatch, id, usersAPI.followed.bind(usersAPI), followSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (id: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, id))\r\n        await followUnfollowFlow(dispatch, id, usersAPI.unfollowed.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","import {authAPI, ResultCodeEnum, ResultCodeForCaptcha, securityAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type DataType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthReducerActionType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: DataType\r\n}\r\n\r\ntype GetCaptchaUrlSuccessActionType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: {\r\n        captchaUrl: string\r\n    }\r\n}\r\n\r\ntype AutLoginActionType = {\r\n    type: 'LOGIN'\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\ntype AntiLoginActionType = {\r\n    type: 'OUT_LOGIN'\r\n    data: {}\r\n}\r\n\r\n\r\ntype ActionType = SetAuthReducerActionType | AutLoginActionType | AntiLoginActionType | GetCaptchaUrlSuccessActionType\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\r\n\r\ntype AuthType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nlet initialState: AuthType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionType): AuthType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthReducerActionType =>\r\n    ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\r\n\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType =>\r\n    ({type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\r\n\r\ntype ThunkType = ThunkAction<void, RootReduxState, unknown, ActionType>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData= await authAPI.me()\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptcha()\r\n    const captchaUrl = data.url\r\n\r\n\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error'\r\n        // @ts-ignore\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let logoutData = await authAPI.logout()\r\n    if (logoutData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer","import {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\n\r\ntype SetInitializedActionType = {\r\n    type: 'INITIALIZED_SUCCESS'\r\n    initialized: boolean\r\n}\r\nconst INITIALIZED_SUCCESS= 'INITIALIZED_SUCCESS'\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action:SetInitializedActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n              initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = (initialized: boolean): SetInitializedActionType => ({type: \"INITIALIZED_SUCCESS\", initialized})\r\n// export const initializedSuccess = () => ({type: \"INITIALIZED_SUCCESS\"})\r\n\r\ntype ThunkType = ThunkAction<void, RootReduxState, unknown, SetInitializedActionType>\r\n\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    // dispatch(somethingelse())\r\n    // dispatch(somethingelse())\r\n    // @ts-ignore\r\n    promise.then(()=>{\r\n        dispatch(initializedSuccess(true))\r\n    })\r\n\r\n\r\n}\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialog-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nconst rootReduser = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootReduxState = ReturnType<typeof rootReduser>\r\n\r\n\r\nlet store = createStore(rootReduser, applyMiddleware(thunkMiddleware))\r\n\r\nexport type ReduxStoreType = typeof store\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n        <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n    </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n                News\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = ({totalItemsCount,pageSize, currentPage,onPageChanged, portionSize}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNUmber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNUmber = portionNumber * portionSize\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 && <button className={styles.prevButton} onClick={()=>{setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNUmber && p <= rightPortionPageNUmber)\r\n                .map(p => {\r\n                return <span className={currentPage === p ? styles.pageNumber : styles.selectedPage}\r\n                             onClick={() => {onPageChanged(p)}}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber && <button className={styles.nextButton} onClick={()=>{setPortionNumber(portionNumber + 1)}}>NEXT</button>}\r\n        </div>\r\n\r\n}\r\n\r\n\r\nexport default Paginator","import {UsersType} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/images/user.jpg\";\r\nimport styles from \"./Users.module.css\";\r\n\r\ntype UserPropsType = {\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n}\r\nexport const User: React.FC<UserPropsType> = ({users, followingInProgress, follow, unfollow}) => {\r\n    return <div>\r\n        {users.map(u => <div key={u.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + u.id}><img alt={''}\r\n                                                          src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                                          className={styles.photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed ? <button disabled={followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              unfollow(u.id)\r\n                                          }}>UnFollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {\r\n                                      follow(u.id)\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n            </span>\r\n            <span>\r\n                <div>{'u.location.country'}</div>\r\n                <div>{'u.location.city'}</div>\r\n            </span>\r\n        </div>)}\r\n    </div>\r\n}","import React from 'react'\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: Array<number>\r\n    followSuccess: (userId: number) => void\r\n    unfollowSuccess: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div>\r\n        <Paginator currentPage={props.currentPage}\r\n                   onPageChanged={props.onPageChanged}\r\n                    totalItemsCount={props.totalUsersCount}\r\n                   pageSize={props.pageSize}\r\n                   portionSize = {10}\r\n        />\r\n        <div>\r\n        <User users={props.users} follow={props.follow} followingInProgress={props.followingInProgress} unfollow={props.unfollow}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Users","import {RootReduxState} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUserSelector = (state: RootReduxState) => {\r\n return state.usersPage.users\r\n}\r\n\r\nexport const getUser = createSelector(getUserSelector,(users)=>{\r\n    return users.filter(u=>true)\r\n})\r\n\r\nexport const getPageSize = (state: RootReduxState) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootReduxState) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: RootReduxState) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: RootReduxState) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: RootReduxState) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    followSuccess,\r\n    getUsers,\r\n    setCurrentPage,\r\n    toggleFollowingProgress,\r\n    unfollow,\r\n    unfollowSuccess,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUser,\r\n} from \"../../redux/users-selector\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    followSuccess: (userId: number) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    unfollowSuccess: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        // const {currentPage, pageSize} = this.props\r\n        // this.props.getUsers(currentPage, pageSize)\r\n        //вот так круче по феншую что выше\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                users={this.props.users}\r\n                followSuccess={this.props.followSuccess}\r\n                unfollowSuccess={this.props.unfollowSuccess}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: RootReduxState): MapStateToPropsType => {\r\n    return {\r\n        users: getUser(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: any): mapDispatchToPropsType => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// export default withAuthRedirect(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>\r\n// (mapStateToProps, {follow, unfollow, followSuccess, unfollowSuccess,\r\n//     setCurrentPage, toggleFollowingProgress, getUsers\r\n//     })(UsersContainer))\r\n//\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>\r\n    (mapStateToProps, {\r\n        follow, unfollow, followSuccess, unfollowSuccess,\r\n        setCurrentPage, toggleFollowingProgress, getUsers\r\n    }),\r\n    withAuthRedirect)(UsersContainer)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return <header className={s.header}>\r\n        <img alt='' src='https://forse-112-ua.at.ua/_ld/0/83573628.png'/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n            :<NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\n\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType>{\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nlet mapStateToProps = (state:RootReduxState): MapStateToPropsType => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default connect <MapStateToPropsType,MapDispatchToPropsType,{},RootReduxState>\r\n(mapStateToProps,{logout})(HeaderContainer);","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n\r\n}\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}\r\n                        // captchaUrl={props.captchaUrl}\r\n        />\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport const LoginForm = (props: any) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n\r\n        {/*{createField('Email', 'email', [required], Input)}*/}\r\n\r\n        <Field component={Input} validate={[required]} name={'email'} placeholder={'Email'}/>\r\n\r\n        {/*{createField('Password', 'password', [required], Input)}*/}\r\n        <Field component={Input} validate={[required]} name={'password'} placeholder={'Password'} type={'password'}/>\r\n\r\n        <div>\r\n            <Field component={Input} name={'rememberMe'} type={\"checkbox\"}/> remember me\r\n        </div>\r\n        <div>\r\n            {props.captchaUrl && <img alt={''} src={props.captchaUrl}/>}\r\n            <div>\r\n                {props.error}\r\n            </div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'Login'})(LoginForm)\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>(mapStateToProps, {login})(Login)","import { Suspense } from \"react\"\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return   <Suspense fallback={<Preloader />}>\r\n        <Component {...props}/>\r\n        </Suspense>\r\n\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\"\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {News} from \"./components/News/News\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspence\";\r\n\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\r\n\r\ntype AppPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs' render={withSuspense(DialogsContainer) }/>\r\n                        <Route path='/profile/:userId?'\r\n                               render={withSuspense(ProfileContainer)}/>\r\n                        <Route path='/users' render={() => <UsersContainer/>}/>\r\n                        <Route path='/login' render={() => <Login/>}/>\r\n                        <Route path='/music' component={Music}/>\r\n                        <Route path='/news' component={News}/>\r\n                        <Route path='/settings' component={Settings}/>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState) => ({\r\n    initialized: state.app.initialized\r\n})\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>\r\n    (mapStateToProps, {initializeApp})(App))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/redux-store\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n            <App />\r\n            </Provider>\r\n        </BrowserRouter>, document.getElementById('root')\r\n    )\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/preloader.0bbdeb44.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <img alt={''} style={{width: '150px', height: '70px'}} src={preloader}/>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2uGjc\",\"pageNumber\":\"Paginator_pageNumber__2zPW0\",\"selectedPage\":\"Paginator_selectedPage__3cR_P\",\"nextButton\":\"Paginator_nextButton__tQvHv\",\"prevButton\":\"Paginator_prevButton__2WW0g\"};","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\n// @ts-ignore\r\nexport const FormControl = ({input, meta, child, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return <div className={styles.formControl + ' ' + (hasError? styles.error : '')}>\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n        <div>\r\n            {hasError && <span>{meta.error} </span>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}> <textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n\r\n    return <FormControl {...props}><input {...input} {...restProps} /> </FormControl>\r\n}\r\nexport const createField = (placeholder: string, name: string, validators: any, component: any, props = {}, text = '') => {\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n        name={name} validate={validators}\r\n               component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}","export const required = (value: any) => {\r\n    if(value){\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if(value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n//\r\n// export const minLengthCreator = (minLength: number) => (value: any) => {\r\n//     if(value.length > value.minLength) return `Max length is ${minLength} symbols`\r\n//     return undefined\r\n//\r\n// }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3L6tK\",\"loginBlock\":\"Header_loginBlock__1a9XU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1_bCD\",\"error\":\"FormsControls_error__2XZs6\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\n\r\nexport type ActionTypes =\r\n    AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | SendMessageActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | DeletePostActionType\r\n    | savePhotoSuccessActionType\r\n\r\ntype AddPostActionType = {\r\n    type: 'ADD-POST'\r\n    newPostBody: string\r\n}\r\n\r\ntype DeletePostActionType = {\r\n    type: 'DELETE_POST'\r\n    id: number\r\n}\r\n\r\ntype UpdateNewPostTextActionType = {\r\n    type: 'UPDATE-NEW-POST-TEXT'\r\n    newText: string\r\n\r\n}\r\n\r\ntype SendMessageActionType = {\r\n    type: 'SEND_MESSAGE'\r\n}\r\n\r\ntype SetUserProfileActionType = {\r\n    type: \"SET_USER_PROFILE\"\r\n    profile: ProfileType | null\r\n}\r\ntype SetStatusActionType = {\r\n    type: \"SET_STATUS\"\r\n    status: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype savePhotoSuccessActionType = {\r\n    type:  typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\nexport type ContactType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactType\r\n    photos: PhotosType\r\n}\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 10},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 25},\r\n        {id: 3, message: 'Blabla', likesCount: 25},\r\n        {id: 4, message: 'Dada', likesCount: 25}\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): ProfilePageType => {\r\n    // @ts-ignore\r\n    switch (action.type) {\r\n        case ADD_POST : {\r\n            let newPost: PostType = {\r\n                id: 5, message: action.newPostBody, likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case DELETE_POST:\r\n            return {...state, posts: [...state.posts.filter(p => p.id !== action.id)]}\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostBody: string): AddPostActionType => ({type: ADD_POST, newPostBody})\r\nexport const deletePost = (id: number): DeletePostActionType => ({type: DELETE_POST, id})\r\nexport const savePhotoSuccess = (photos: PhotosType): savePhotoSuccessActionType => ({type: SAVE_PHOTO_SUCCESS, photos})\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileType | null): SetUserProfileActionType => (\r\n    {type: SET_USER_PROFILE, profile})\r\n\r\nexport const setStatus = (status: string): SetStatusActionType => (\r\n    {type: SET_STATUS, status})\r\n\r\n\r\ntype ThunkType = ThunkAction<void, RootReduxState, unknown, ActionTypes>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let profileData = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(profileData))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data))\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReduxState):MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<MapStateToPropsForRedirectType, any>{\r\n        render() {\r\n            if(!this.props.isAuth) return  <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect<MapStateToPropsForRedirectType,{},{},RootReduxState>(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n"],"sourceRoot":""}